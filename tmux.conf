# remap prefix to ^a
unbind ^b
set -g prefix ^a
bind ^a send-prefix

# force a reload of the config file
unbind r
bind r source-file ~/.tmux.conf \; display "Reloaded!"

# Keep your finger on ctrl, or don't
bind ^D detach-client

# Create splits and vertical splits
bind v split-window -h -p 50 -c "#{pane_current_path}"
bind ^V split-window -h -p 50 -c "#{pane_current_path}"
bind s split-window -p 50 -c "#{pane_current_path}"
bind ^S split-window -p 50 -c "#{pane_current_path}"

# New windows/pane in $PWD
bind c new-window -c "#{pane_current_path}"

# Use vi keybindings for tmux commandline input.
# Note that to get command mode you need to hit ESC twice...
set -g status-keys vi

# Use vi keybindings in copy and choice modes
setw -g mode-keys vi

# Change copy / paste bindings to work like Vim and use copy-pipe
bind Escape copy-mode
bind p paste-buffer
bind -t vi-copy v begin-selection
bind -t vi-copy V rectangle-toggle
bind -t vi-copy y copy-pipe pbcopy

# Update default binding of `Enter` to also use copy-pipe
unbind -t vi-copy Enter
bind -t vi-copy Enter copy-pipe pbcopy

# Smart pane switching with awareness of vim splits
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?x?)(diff)?$"'
bind -n ^h if-shell "$is_vim" "send-keys ^h" "select-pane -L"
bind -n ^j if-shell "$is_vim" "send-keys ^j" "select-pane -D"
bind -n ^k if-shell "$is_vim" "send-keys ^k" "select-pane -U"
bind -n ^l if-shell "$is_vim" "send-keys ^l" "select-pane -R"
bind -n ^\ if-shell "$is_vim" "send-keys ^\\" "select-pane -l"

# start window numbers at 1 to match keyboard order with tmux window order
set -g base-index 1
setw -g pane-base-index 1

# renumber windows sequentially after closing any of them
set -g renumber-windows on

# soften status bar color from harsh green to light gray
set -g status-bg '#666666'
set -g status-fg '#aaaaaa'

# remove administrative debris (session name, hostname, time) in status bar
set -g status-left ''
set -g status-right ''

# increase scrollback lines
set -g history-limit 10000

# enable mouse support
set -g mouse-utf8 on
set -g mouse on

# enable scrolling with the mouse wheel
# http://sc0ty.pl/2015/12/reasonable-mouse-support-in-tmux/

# on wheel up
#   select pane under mouse
#   if in copy mode or running an app actively capturing mouse
#     pass-through mouse event
#   else if in alternate screen
#     send Up
#   else
#     enter copy-mode and pass-though mouse event
bind -n WheelUpPane \
    select-pane -t =\; if-shell -Ft= "#{?pane_in_mode,1,#{mouse_any_flag}}" \
        "send-keys -M" \
        "if-shell -Ft= '#{alternate_on}' \
            'send-keys Up' \
            'copy-mode -e; send-keys -M'"

# on wheel down
#   select pane under mouse
#   if in copy mode or running an app actively capturing mouse
#     pass-through mouse event
#   else if in alternate screen
#     send Down
bind -n WheelDownPane \
    select-pane -t =\; if-shell -Ft= "#{?pane_in_mode,1,#{mouse_any_flag}}" \
        "send-keys -M" \
        "if-shell -Ft= '#{alternate_on}' \
            'send-keys Down'"

# accelerate mouse scrolling
#bind -t vi-copy WheelUpPane halfpage-up
#bind -t vi-copy WheelDownPane halfpage-down

# make PageUp enter copy mode unless the alternate screen is showing
bind -n PPage if-shell -F "#{alternate_on}" \
    "send-keys PPage" \
    "copy-mode -e; send-keys PPage"
